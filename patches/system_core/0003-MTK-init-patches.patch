From 77a141bb918b85ec9a8826f0b3be90dc7d7768b0 Mon Sep 17 00:00:00 2001
From: Yuri Konotopov <ykonotopov@gmail.com>
Date: Sat, 9 Jul 2016 15:35:38 +0300
Subject: [PATCH 3/3] MTK init patches

Change-Id: I67bb4eb459731ce1a1d38ecf68db657526f3abd3
---
 init/Android.mk    |  14 +++++++
 init/builtins.c    |  12 ++++++
 init/init.c        | 112 ++++++++++++++++++++++++++++++++++++++++++++++++++++-
 init/init.h        |   4 ++
 init/init_parser.c |  86 ++++++++++++++++++++++++++++++++++++++++
 5 files changed, 226 insertions(+), 2 deletions(-)
 mode change 100755 => 100644 init/Android.mk

diff --git a/init/Android.mk b/init/Android.mk
old mode 100755
new mode 100644
index c6863bf..e4d3a26
--- a/init/Android.mk
+++ b/init/Android.mk
@@ -29,6 +29,20 @@ ifneq (,$(filter userdebug eng,$(TARGET_BUILD_VARIANT)))
 LOCAL_CFLAGS += -DALLOW_LOCAL_PROP_OVERRIDE=1 -DALLOW_DISABLE_SELINUX=1
 endif
 
+# Enable MTK stuff
+ifeq ($(BOARD_HAS_MTK_HARDWARE), true)
+LOCAL_CFLAGS += -DMTK_HARDWARE
+LOCAL_CFLAGS += -DALLOW_LOCAL_PROP_OVERRIDE=1 -DALLOW_DISABLE_SELINUX=1
+# add mtk fstab flags support
+LOCAL_CFLAGS += -DMTK_FSTAB_FLAGS
+endif
+
+# add for mtk init
+ifneq ($(BUILD_MTK_LDVT), yes)
+LOCAL_CFLAGS += -DMTK_INIT
+endif
+# end
+
 # Enable ueventd logging
 #LOCAL_CFLAGS += -DLOG_UEVENTS=1
 
diff --git a/init/builtins.c b/init/builtins.c
index 9ceebb3..15f4a08 100644
--- a/init/builtins.c
+++ b/init/builtins.c
@@ -48,6 +48,9 @@
 #include "log.h"
 
 #include <private/android_filesystem_config.h>
+#ifdef INIT_ENG_BUILD
+#define printf(x...) NOTICE(x)
+#endif
 
 int add_environment(const char *name, const char *value);
 
@@ -77,7 +80,16 @@ static int write_file(const char *path, const char *value)
     }
 }
 
+static int _open(const char *path)
+{
+    int fd;
+
+    fd = open(path, O_RDONLY | O_NOFOLLOW);
+    if (fd < 0)
+        fd = open(path, O_WRONLY | O_NOFOLLOW);
 
+    return fd;
+}
 static int _chown(const char *path, unsigned int uid, unsigned int gid)
 {
     int ret;
diff --git a/init/init.c b/init/init.c
index 8a7427d..c50f7a0 100644
--- a/init/init.c
+++ b/init/init.c
@@ -58,6 +58,23 @@
 #include "ueventd.h"
 #include "watchdogd.h"
 
+#ifdef MTK_INIT
+/* NEW FEATURE: multi-boot mode */
+#define MT_NORMAL_BOOT 0
+#define MT_META_BOOT 1
+#define MT_RECOVERY_BOOT 2
+#define MT_SW_REBOOT 3
+#define MT_FACTORY_BOOT 4
+#define MT_ADVMETA_BOOT 5
+#define MT_ATE_FACTORY_BOOT 6
+#define MT_ALARM_BOOT 7
+#define MT_UNKNOWN_BOOT 8
+#endif
+
+#ifdef INIT_ENG_BUILD
+#define printf(x...) NOTICE(x)
+#endif
+
 struct selabel_handle *sehandle;
 struct selabel_handle *sehandle_prop;
 
@@ -194,6 +211,9 @@ void service_start(struct service *svc, const char *dynamic_args)
          * they are ONESHOT
          */
     if (svc->flags & SVC_RUNNING) {
+#ifdef MTK_INIT
+		ERROR("service '%s' still running, return directly\n", svc->name);
+#endif
         return;
     }
 
@@ -379,6 +399,10 @@ void service_start(struct service *svc, const char *dynamic_args)
     svc->pid = pid;
     svc->flags |= SVC_RUNNING;
 
+#ifdef MTK_INIT
+    //record the usage of serivce
+    svc->flags |= SVC_MT_GOTLIFE;
+#endif
     if (properties_inited())
         notify_service_state(svc->name, "running");
 }
@@ -501,6 +525,17 @@ static void msg_stop(const char *name)
     }
 }
 
+#ifdef MTK_INIT
+extern void service_show(void);
+extern void property_show(void);
+static void msg_show(const char *name)
+{
+    if((!strcmp("prop", name)) || (!strcmp("property", name)))
+        property_show();
+    else if((!strcmp("svc", name)) || (!strcmp("service", name)))
+        service_show();
+}
+#endif
 static void msg_restart(const char *name)
 {
     struct service *svc = service_find_by_name(name);
@@ -971,6 +1006,36 @@ static int audit_callback(void *data, security_class_t cls __attribute__((unused
     return 0;
 }
 
+#ifdef MTK_INIT
+/* NEW FEATURE: multi-boot mode */
+static int get_boot_mode(void)
+{
+  int fd;
+  size_t s;
+  char boot_mode[4] = {'0'};
+
+  fd = open("/sys/class/BOOT/BOOT/boot/boot_mode", O_RDONLY);
+  if (fd < 0)
+  {
+    ERROR("fail to open: %s\n", "/sys/class/BOOT/BOOT/boot/boot_mode");
+    return 0;
+  }
+
+  s = read(fd, (void *)&boot_mode, sizeof(boot_mode) - 1);
+  close(fd);
+
+  if(s <= 0)
+  {
+	ERROR("could not read boot mode sys file\n");
+    return 0;
+  }
+
+  boot_mode[s] = '\0';
+  return atoi(&boot_mode);
+}
+/* end: multi-boot mode */
+#endif
+
 int log_callback(int type, const char *fmt, ...)
 {
     int level;
@@ -1029,7 +1094,6 @@ static int charging_mode_booting(void)
     return ('1' == cmb);
 #endif
 }
-
 int main(int argc, char **argv)
 {
     int fd_count = 0;
@@ -1042,7 +1106,11 @@ int main(int argc, char **argv)
     int keychord_fd_init = 0;
     bool is_charger = false;
     bool is_ffbm = false;
+#ifdef MTK_INIT
+    int mt_boot_mode = 0;
 
+    klog_set_level(6);
+#endif
     if (!strcmp(basename(argv[0]), "ueventd"))
         return ueventd_main(argc, argv);
 
@@ -1067,6 +1135,9 @@ int main(int argc, char **argv)
     mount("proc", "/proc", "proc", 0, NULL);
     mount("sysfs", "/sys", "sysfs", 0, NULL);
 
+#ifdef INIT_ENG_BUILD
+    mount("debugfs", "/sys/kernel/debug", "debugfs", 0, NULL);
+#endif
         /* indicate that booting is in progress to background fw loaders, etc */
     close(open("/dev/.booting", O_WRONLY | O_CREAT, 0000));
 
@@ -1107,9 +1178,46 @@ int main(int argc, char **argv)
 
     INFO("property init\n");
     property_load_boot_defaults();
+#ifndef INIT_ENG_BUILD
+    property_set("ro.mtprof.disable", "1");
+#endif
+
 
     INFO("reading config file\n");
-    init_parse_config_file("/init.rc");
+
+#ifdef MTK_INIT
+/* NEW FEATURE: multi-boot mode */
+    mt_boot_mode = get_boot_mode();
+    if ( (mt_boot_mode == MT_FACTORY_BOOT) || (mt_boot_mode == MT_ATE_FACTORY_BOOT) ) {
+        printf("Factory Mode Booting.....\n");
+        property_set("sys.mtk.no.factoryimage","1");
+        init_parse_config_file("/factory_init.rc");
+        init_parse_config_file("/factory_init.project.rc");
+    }
+    else if ( mt_boot_mode == MT_META_BOOT ) {
+        printf("META Mode Booting.....\n");
+        init_parse_config_file("/meta_init.rc");
+        init_parse_config_file("/meta_init.project.rc");
+    }
+	else
+     {
+#endif // MTK_INIT
+        init_parse_config_file("/init.rc");
+#ifdef MTK_INIT
+    }
+#endif
+
+#ifdef MTK_INIT
+    if ( (mt_boot_mode == MT_FACTORY_BOOT) || (mt_boot_mode == MT_ATE_FACTORY_BOOT) ) {
+    	  NOTICE("No need modem.rc for factory mode\n");
+    }
+    else if ( mt_boot_mode == MT_META_BOOT ) {
+        init_parse_config_file("/meta_init.modem.rc");
+    }else {
+        init_parse_config_file("/init.modem.rc");
+    }
+#endif // MTK_INIT
+/**** End of Parsing .rc files ****/
 
     action_for_each_trigger("early-init", action_add_queue_tail);
 
diff --git a/init/init.h b/init/init.h
index 48ac12f..eaa80e6 100644
--- a/init/init.h
+++ b/init/init.h
@@ -79,6 +79,10 @@ struct svcenvinfo {
 #define SVC_RC_DISABLED 0x80  /* Remember if the disabled flag was set in the rc script */
 #define SVC_RESTART     0x100 /* Use to safely restart (stop, wait, start) a service */
 #define SVC_DISABLED_START 0x200 /* a start was requested but it was disabled at the time */
+#ifdef MTK_INIT
+#define SVC_MT_GOTLIFE  0x8000  /* run before?*/
+#endif
+
 
 #ifndef NR_SVC_SUPP_GIDS
 #define NR_SVC_SUPP_GIDS 12    /* twelve supplementary groups */
diff --git a/init/init_parser.c b/init/init_parser.c
index eec9090..118b6dc 100644
--- a/init/init_parser.c
+++ b/init/init_parser.c
@@ -33,6 +33,9 @@
 #include <cutils/iosched_policy.h>
 #include <cutils/list.h>
 
+#ifdef INIT_ENG_BUILD
+#define printf(x...) NOTICE(x)
+#endif
 static list_declare(service_list);
 static list_declare(action_list);
 static list_declare(action_queue);
@@ -657,6 +660,11 @@ void action_add_queue_tail(struct action *act)
     if (list_empty(&act->qlist)) {
         list_add_tail(&action_queue, &act->qlist);
     }
+#ifdef MTK_INIT
+    else {
+        ERROR("action requeue to tail before execute act %p\n", act);
+    }
+#endif
 }
 
 struct action *action_remove_queue_head(void)
@@ -667,6 +675,9 @@ struct action *action_remove_queue_head(void)
         struct listnode *node = list_head(&action_queue);
         struct action *act = node_to_item(node, struct action, qlist);
         list_remove(node);
+#ifdef MTK_INIT
+        node->next = node->prev = NULL;
+#endif
         list_init(node);
         return act;
     }
@@ -944,3 +955,78 @@ static void parse_line_action(struct parse_state* state, int nargs, char **args)
     memcpy(cmd->args, args, sizeof(char*) * nargs);
     list_add_tail(&act->commands, &cmd->clist);
 }
+#ifdef MTK_INIT
+void service_show(void)
+{
+    struct service *svc;
+    struct action *act;
+    struct command *cmd;
+    struct listnode *node;
+    int n;
+    int i = 0;
+    char state;
+    NOTICE("========================================================================\n");
+    NOTICE("[Daemon Type:AutoStart]\n");
+    list_for_each(node, &service_list) {
+        //Show Daemons;
+        svc = node_to_item(node, struct service, slist);
+        if((!(svc->flags & SVC_DISABLED)) && (!(svc->flags & SVC_ONESHOT))){
+            if(svc->flags & SVC_RUNNING)
+                state = 'R';
+            else if(svc->flags & SVC_MT_GOTLIFE)
+                state = 'S';
+            else
+                state = 'N';
+            NOTICE("svc# %3d | %16s | %c(PID:%d) | %7s | %s\n", ++i, svc->name, state, svc->pid, svc->classname, svc->args[0]);
+
+        }
+    }
+    NOTICE("========================================================================\n");
+    NOTICE("[Daemon Type:ManualStart]\n");
+    list_for_each(node, &service_list) {
+        //Show Daemons;
+        svc = node_to_item(node, struct service, slist);
+        if(((svc->flags & SVC_DISABLED)) && (!(svc->flags & SVC_ONESHOT))){
+            if(svc->flags & SVC_RUNNING)
+                state = 'R';
+            else if(svc->flags & SVC_MT_GOTLIFE)
+                state = 'S';
+            else
+                state = 'N';
+            NOTICE("svc# %3d | %16s | %c(PID:%d) | %7s | %s\n", ++i, svc->name, state, svc->pid, svc->classname, svc->args[0]);
+        }
+    }
+    NOTICE("========================================================================\n");
+    NOTICE("[Exec Once: AutoStart]\n");
+    list_for_each(node, &service_list) {
+        //Show Daemons;
+        svc = node_to_item(node, struct service, slist);
+        if((!(svc->flags & SVC_DISABLED)) && ((svc->flags & SVC_ONESHOT))){
+            if(svc->flags & SVC_RUNNING)
+                state = 'R';
+            else if(svc->flags & SVC_MT_GOTLIFE)
+                state = 'S';
+            else
+                state = 'N';
+            NOTICE("svc# %3d | %16s | %c(PID:%d) | %7s | %s\n", ++i, svc->name, state, svc->pid, svc->classname, svc->args[0]);
+        }
+    }
+    NOTICE("========================================================================\n");
+    NOTICE("[Exec Once: ManualStart]\n");
+    list_for_each(node, &service_list) {
+        //Show Daemons;
+        svc = node_to_item(node, struct service, slist);
+        if(((svc->flags & SVC_DISABLED)) && ((svc->flags & SVC_ONESHOT))){
+            if(svc->flags & SVC_RUNNING)
+                state = 'R';
+            else if(svc->flags & SVC_MT_GOTLIFE)
+                state = 'S';
+            else
+                state = 'N';
+            NOTICE("svc# %3d | %16s | %c(PID:%d) | %7s | %s\n", ++i, svc->name, state, svc->pid, svc->classname, svc->args[0]);
+        }
+    }
+    NOTICE("========================================================================\n");
+
+}
+#endif
-- 
2.7.3

